import time
from openerp.osv import fields, osv
from datetime import datetime
from openerp import tools
from openerp.tools.translate import _

"""
LEGEND:
Result		Meaning		Description
P		Present		Expected at work and showed up at work
A		Absent		Expected at work and did not show up at work
PL		Paid Leave	Not expected at work, but will get paid
UL		Unpaid Leave	Not expected at work, pay will get deducted
H		Holiday		Listed holiday in the Holiday calendar for that employee
2H		Double Holiday	Worked on a listed holiday
"""


# Create a Holiday Calendar, annual leaves, recurring leaves, etc. 

# Create another field in Employee Contract. Add Holiday Calendar to this contract.

# Create a "Payroll CODE" field in Leave Type. This should be linked to a table of various available codes, this table also needs to be created, deafult values in the table can be PL and UL.
class hr_holidays_payroll_code(osv.Model):
	_name = 'hr.holidays.payroll.code'
	_columns = {
		'name' : fields.char('Description'),
		'code' : fields.char('Code'),
}

class hr_holidays_status(osv.osv):
    _inherit = "hr.holidays.status"
    _columns = {
		'payroll_code' : fields.many2one('hr.holidays.payroll.code','Payroll Code', required=True), 
}

class hr_attendance_table(osv.Model):
    _name = 'hr.attendance.table'
    _description = 'Attendance Table'
    _columns = {
        'employee_id': fields.many2one('hr.employee', 'Employee', required=True),
        'date': fields.date('Day of the Month'),
	'period': 
	'attendance': fields.boolean('Absent/Present'),
	'absent_info': fields.char('Information', readonly=True),
	'final_result': fields.char('Result'),
    }
##make date and employee ID unique 

#Absent Info Function:
"""
Check Crm.meeting for Leave records, check Working schedule for Weekly off, check Holiday Calendar. WRITE value to absent_info.
 
Goa Attendance Logic
for Employee
	for Date in Period
		if leave exists in crm.meeting for that date
			set value of absent_info = leave type.payrollcode
		if the date is a holiday in Holiday Calendar
			set value of absent_info = H
		if the date returns NULL for working hours in working schedule
			set value of absent_info = WO (Weekly Off)
"""


# Result Function: 
"""
Check the attendance field compare it to the absent_info field. Create a Final result.

Result Logic for Goa:
if absent_info:
	if absent_info == "H" and attendance
		final_result = "2H"
	else
		final_result = absent_info
	

"""

# Validate Function
"""
Freeze Ability to edit attedance.
Allocate compensatory offs:
if attendance ==True & absent_info:
	Allocate a compensatory off. Descrption should be: "Having worked on ____" % date.

"""

# Modify payslip code.
class hr_payslip(osv.osv):

    _inherit = 'hr.payslip'

    def get_worked_day_lines(self, cr, uid, contract_ids, date_from, date_to, context=None):
        """
        @param contract_ids: list of contract id
        @return: returns a list of dict containing the input that should be applied for the given contract between date_from and date_to
        """
        def was_on_leave(employee_id, datetime_day, context=None):
            res = False
            day = datetime_day.strftime("%Y-%m-%d")
            holiday_ids = self.pool.get('hr.holidays').search(cr, uid, [('state','=','validate'),('employee_id','=',employee_id),('type','=','remove'),('date_from','<=',day),('date_to','>=',day)])
            if holiday_ids:
                res = self.pool.get('hr.holidays').browse(cr, uid, holiday_ids, context=context)[0].holiday_status_id.name
            return res

        res = []
        for contract in self.pool.get('hr.contract').browse(cr, uid, contract_ids, context=context):
            if not contract.working_hours:
                #fill only if the contract as a working schedule linked
                continue
            P = {
                 'name': _("Normal Working Days paid at 100%"),#Should include only Present days
                 'sequence': 1,
                 'code': 'WORK100',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
            worked = {
                 'name': _("Goa-Days on the Ground"), #Number of days physically present (needed only for Goa)
                 'sequence': 2,
                 'code': 'WORK200',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
            WO = {
                 'name': _("Weekly Offs"),
                 'sequence': 3,
                 'code': 'weekly',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
            A = {
                 'name': _("Days Marked as Absent"),
                 'sequence': 4,
                 'code': 'absent',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
            PL = {
                 'name': _("Paid Leaves taken"),
                 'sequence': 5,
                 'code': 'pl',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
            UL = {
                 'name': _("Unpaid Leaves taken"),
                 'sequence': 6,
                 'code': 'ul',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
            H = {
                 'name': _("Paid Holidays"),
                 'sequence': 7,
                 'code': 'paid_holiday',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
            2H = {
                 'name': _("Worked on a Paid Holiday"),
                 'sequence': 8,
                 'code': 'worked_paid_holiday',
                 'number_of_days': 0.0,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
	    res += [P] + [A] + [PL] + [WO] + [UL] + [H] + [2H] + [worked]
            day_from = datetime.strptime(date_from,"%Y-%m-%d")
            day_to = datetime.strptime(date_to,"%Y-%m-%d")
            nb_of_days = (day_to - day_from).days + 1
            attendance_line = self.pool.get('hr.attendance.table').search(cr, uid, [('employee_id','=',contract.employee_id),('date','=',day_from),('date','<=',date_to)])
            f
            for day in range(0, nb_of_days):
               att_id = self.pool.get('hr.attendance.table').search(cr, uid, [('employee_id','=',contract.employee_id),('date','=',day_from +timedelta(days=day))])
                att_obj = self.browse('hr.attendance.table')browse(cr,uid, att_id)
		if att_obj.attendance == "P":
                        worked['number_of_days'] += 1.0
                        worked['number_of_hours'] += 0.0
		if att_obj.final_result in res:
                        res[att_obj.final_result]['number_of_days'] += 1.0  #please check
                        res[att_obj.final_result]['number_of_hours'] += 0.0 #please check
		else:
                        res[att_obj.final_result] = {
                                'name': att_obj.final_result,
                                'sequence': 10,
                                'code': att_obj.final_result,
                                'number_of_days': 1.0,
                                'number_of_hours': 0.0,
                                'contract_id': contract.id,
                            }
	    monthdays = {
                 'name': _("Days in the Month"),
                 'sequence': 100,
                 'code': 'MONTHDAYS',
                 'number_of_days': nb_of_days,
                 'number_of_hours': 0.0,
                 'contract_id': contract.id,
            }
	    res += [monthdays]
        return res


